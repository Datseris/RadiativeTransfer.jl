using LinearAlgebra
using StaticArrays
using BenchmarkTools
using KernelAbstractions
using CUDA

n = 300
FT = Float32

@kernel function rt_interaction_kernel!(R‚Åª‚Å∫, T‚Å∫‚Å∫, R‚Å∫‚Åª, T‚Åª‚Åª, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª, M1, M2, M3)
    N = @index(Global)
    rt_interaction!(R‚Åª‚Å∫[N], T‚Å∫‚Å∫[N], R‚Å∫‚Åª[N], T‚Åª‚Åª[N], r‚Åª‚Å∫[N], t‚Å∫‚Å∫[N], r‚Å∫‚Åª[N], t‚Åª‚Åª[N], M1[N], M2[N], M3[N])
    @synchronize
end

function rt_interaction_stupid!(R‚Åª‚Å∫, T‚Å∫‚Å∫, R‚Å∫‚Åª, T‚Åª‚Åª, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª, M1, M2, M3)
    for N = 1:length(R‚Åª‚Å∫)
        rt_interaction!(R‚Åª‚Å∫[N], T‚Å∫‚Å∫[N], R‚Å∫‚Åª[N], T‚Åª‚Åª[N], r‚Åª‚Å∫[N], t‚Å∫‚Å∫[N], r‚Å∫‚Åª[N], t‚Åª‚Åª[N], M1[N], M2[N], M3[N])
    end
    # @synchronize
end


function rt_interaction!(R‚Åª‚Å∫, T‚Å∫‚Å∫, R‚Å∫‚Åª, T‚Åª‚Åª, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª, M1, M2)
    # ToDo: Important output from this routine is R‚Åª‚Å∫, R‚Å∫‚Åª, T‚Å∫‚Å∫, T‚Åª‚Åª (can be renamed to ùêì‚Åª‚Åª, etc later)
    # Need to check with paper nomenclature. This is basically eqs. 23-28 in vSmartMOM)
    # for i = 1:1000
    M1[:] = (I - R‚Å∫‚Åª * r‚Åª‚Å∫) \ T‚Å∫‚Å∫
    M2[:] = (I - r‚Åª‚Å∫ * R‚Å∫‚Åª) \ t‚Åª‚Åª

        # repeating for mirror-reflected directions
        
    R‚Å∫‚Åª[:] = r‚Å∫‚Åª + t‚Å∫‚Å∫ * R‚Å∫‚Åª * M2 
    T‚Åª‚Åª[:] = T‚Å∫‚Å∫ * M2
    T‚Å∫‚Å∫[:] = t‚Å∫‚Å∫ * M1
    R‚Åª‚Å∫[:] = R‚Åª‚Å∫ + T‚Åª‚Åª * r‚Åª‚Å∫ * M1
    return nothing
    # end 
        # return t_R‚Åª‚Å∫, t_T‚Å∫‚Å∫, t_R‚Å∫‚Åª, t_T‚Åª‚Åª
end
function rt_interaction!(R‚Åª‚Å∫, T‚Å∫‚Å∫, R‚Å∫‚Åª, T‚Åª‚Åª, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª, aux1, aux2, aux3)
    mul!(aux1, R‚Å∫‚Åª, r‚Åª‚Å∫)        # R‚Å∫‚Åª * r‚Åª‚Å∫
    aux1[:] = I - aux1   # (I - R‚Å∫‚Åª * r‚Åª‚Å∫)
    aux2[:] = aux1 \ T‚Å∫‚Å∫
    # ldiv!(aux2, qr!(aux1), T‚Å∫‚Å∫) # M1 = (I - R‚Å∫‚Åª * r‚Åª‚Å∫) \ T‚Å∫‚Å∫

        # t_R‚Åª‚Å∫ = R‚Åª‚Å∫ + T‚Åª‚Åª * r‚Åª‚Å∫ * M1
    mul!(aux1, r‚Åª‚Å∫, aux2)   # r‚Åª‚Å∫ * M1
    mul!(aux3, T‚Åª‚Åª, aux1)   # T‚Åª‚Åª * r‚Åª‚Å∫ * M1
    R‚Åª‚Å∫[:] = R‚Åª‚Å∫ + aux3     # t_R‚Åª‚Å∫ = R‚Åª‚Å∫ + T‚Åª‚Åª * r‚Åª‚Å∫ * M1
        
        # t_T‚Å∫‚Å∫ = t‚Å∫‚Å∫ * M1
    mul!(T‚Å∫‚Å∫, t‚Å∫‚Å∫, aux2)

        # Repeating for mirror-reflected directions

        # M1 = (I - r‚Åª‚Å∫ * R‚Å∫‚Åª) \ t‚Åª‚Åª
    mul!(aux1, r‚Åª‚Å∫, R‚Å∫‚Åª)        # r‚Åª‚Å∫ * R‚Å∫‚Åª
    aux1[:] = I - aux1   # (I - r‚Åª‚Å∫ * R‚Å∫‚Åª)
    aux2[:] = aux1 \ t‚Åª‚Åª
    # ldiv!(aux2, qr!(aux1), t‚Åª‚Åª) # M1 = (I - r‚Åª‚Å∫ * R‚Å∫‚Åª) \ t‚Åª‚Åª

        # t_R‚Å∫‚Åª = r‚Å∫‚Åª + t‚Å∫‚Å∫ * R‚Å∫‚Åª * M1
    mul!(aux3, R‚Å∫‚Åª, aux2)   # R‚Å∫‚Åª * M1
    mul!(aux1, t‚Å∫‚Å∫, aux3)   # t‚Å∫‚Å∫ * R‚Å∫‚Åª * M1
    R‚Å∫‚Åª[:] = r‚Å∫‚Åª + aux1     # t_R‚Å∫‚Åª = r‚Å∫‚Åª + t‚Å∫‚Å∫ * R‚Å∫‚Åª * M1

        # t_T‚Åª‚Åª = T‚Å∫‚Å∫ * M1
    mul!(T‚Åª‚Åª, T‚Å∫‚Å∫, aux2)
    return nothing
end


r‚Åª‚Å∫ = CuArray(randn(FT, n, n));
t‚Å∫‚Å∫ = CuArray(randn(FT, n, n));
r‚Å∫‚Åª = CuArray(randn(FT, n, n));
t‚Åª‚Åª = CuArray(randn(FT, n, n));
R‚Åª‚Å∫ = CuArray(randn(FT, n, n));
T‚Å∫‚Å∫ = CuArray(randn(FT, n, n));
R‚Å∫‚Åª = CuArray(randn(FT, n, n));
T‚Åª‚Åª = CuArray(randn(FT, n, n));
M1 = similar(r‚Å∫‚Åª);
M2 = similar(r‚Å∫‚Åª);
M3 = similar(r‚Å∫‚Åª);

@btime rt_interaction!(R‚Åª‚Å∫, T‚Å∫‚Å∫, R‚Å∫‚Åª, T‚Åª‚Åª, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª, M1, M2, M3)

nSpec = 1000
AA = [CuArray(randn(FT, n, n)) for i = 1:nSpec]
BB = [CuArray(randn(FT, n, n)) for i = 1:nSpec]
CC = [CuArray(randn(FT, n, n)) for i = 1:nSpec]


_r‚Åª‚Å∫ = [CuArray(randn(FT, n, n)) for i = 1:nSpec]
_t‚Å∫‚Å∫ = [CuArray(randn(FT, n, n)) for i = 1:nSpec]
_r‚Å∫‚Åª = [CuArray(randn(FT, n, n)) for i = 1:nSpec]
_t‚Åª‚Åª = [CuArray(randn(FT, n, n)) for i = 1:nSpec]
_R‚Åª‚Å∫ = [CuArray(randn(FT, n, n)) for i = 1:nSpec]
_T‚Å∫‚Å∫ = [CuArray(randn(FT, n, n)) for i = 1:nSpec]
_R‚Å∫‚Åª = [CuArray(randn(FT, n, n)) for i = 1:nSpec]
_T‚Åª‚Åª = [CuArray(randn(FT, n, n)) for i = 1:nSpec]
_M1 = [CuArray(randn(FT, n, n)) for i = 1:nSpec]
_M2 = [CuArray(randn(FT, n, n)) for i = 1:nSpec]
_M3 = [CuArray(randn(FT, n, n)) for i = 1:nSpec]
kernel_inter! = rt_interaction_kernel!(CUDADevice())
kernel_inter!(_R‚Åª‚Å∫, _T‚Å∫‚Å∫, _R‚Å∫‚Åª, _T‚Åª‚Åª, _r‚Åª‚Å∫, _t‚Å∫‚Å∫, _r‚Å∫‚Åª, _t‚Åª‚Åª, _M1, _M2,_M3, ndrange=nSpec)

@kernel function mulCu!(A, B, C)
    N = @index(Global)
    rt_interaction!(R‚Åª‚Å∫[N], T‚Å∫‚Å∫[N], R‚Å∫‚Åª[N], T‚Åª‚Åª[N], r‚Åª‚Å∫[N], t‚Å∫‚Å∫[N], r‚Å∫‚Åª[N], t‚Åª‚Åª[N], M1[N], M2[N], M3[N])
    @synchronize
end

@kernel function mat_test!(A, B, C)
    N = @index(Global)
    @tensor A[i, j,N] = B[i, k, N] * C[k, j,N]
end

function testGPU!(A, B, C)
    event = ker!(A, B, C, ndrange=nSpec)
    wait(CUDADevice(), event)
    return nothing
end
function matCPU_test!(A, B, C)
    d = size(C, 3)
    @inbounds for N = 1:d
        A[:, :,N] = B[:, :, N] * C[:, :,N]
    end
end
