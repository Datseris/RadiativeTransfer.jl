"Elemental single-scattering layer"
function rt_elemental_helper!(pol_type, dœÑ_nSpec, dœÑ, œñ_nSpec, œñ, Z‚Å∫‚Å∫, Z‚Åª‚Å∫, m, 
                              ndoubl, scatter, qp_Œº, wt_Œº, 
                              added_layer::AddedLayer, 
                              D::AbstractArray,
                              I_static::AbstractArray) where {FT}
    
    @unpack r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫ = added_layer

    # ToDo: Main output is r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫ (can be renamed to t‚Å∫‚Å∫, etc)
    # Need to check with paper nomenclature. This is basically eqs. 19-20 in vSmartMOM

    # dœÑ: optical depth of elemental layer
    # œñ: single scattering albedo of elemental layer
    # bb: thermal source function at the upper boundary of the elemental layer
    # m: fourier moment
    # n: layer of which this is an elemental
    # ndoubl: number of doubling computations needed to progress from the elemental layer 
    #         to the full homogeneous layer n
    # scatter: flag indicating scattering

    nSpec = size(r‚Åª‚Å∫, 3)

    Z‚Å∫‚Å∫_ = repeat(Z‚Å∫‚Å∫, 1, 1, 1)
    Z‚Åª‚Å∫_ = repeat(Z‚Åª‚Å∫, 1, 1, 1)

    if scatter

        # TODO: import vector containing quadrature cosines qp_Œº of length Nquad4
        # TODO: import vector containing quadrature weights wt_Œº of length Nquad4
        # TODO: construct composite, post-truncation dœÑ=œÑ/2^{ndoubl} , œñ, p‚Å∫‚Å∫, p‚Åª‚Å∫ matrices and import them here

        qp_Œº4 = reduce(vcat, (fill.(qp_Œº, [pol_type.n])))
        wt_Œº4 = reduce(vcat, (fill.(wt_Œº, [pol_type.n])))

        NquadN = length(qp_Œº4)

        wct = m == 0 ? 0.50 * œñ * wt_Œº4  : 0.25 * œñ * wt_Œº4
        wct2 = m == 0 ? wt_Œº4  : wt_Œº4 / 2
        # wct = m==0 ? 0.50 * 1 .* wt_Œº4  : 0.25 .* 1 .* wt_Œº4

        # Get the diagonal matrices first
        d_qp = Array(Diagonal(1 ./ qp_Œº4)) 
        d_wct = Array(Diagonal(wct))

        # Calculate r‚Åª‚Å∫ and t‚Å∫‚Å∫
        
        # Version 1: no absorption in batch mode (like before), need to separate these modes
        if maximum(dœÑ) < 0.0001 

            r‚Åª‚Å∫[:,:,:] .= d_qp * Z‚Åª‚Å∫ * (d_wct * dœÑ)
            t‚Å∫‚Å∫[:,:,:] .= I_static .- (d_qp * ((I_static .- Z‚Å∫‚Å∫ * d_wct) * dœÑ))
        
        else    
        # Version 2: with absorption in batch mode, low tau_scatt but higher tau_total, needs different equations
        # This is not yet GPU ready as it has element wise operations (should work for CPU)
            @inbounds for n = 1:nSpec
                @inbounds for i in 1:NquadN, j in 1:NquadN

                    @assert (qp_Œº4[i] + qp_Œº4[j] != 0)
                    @assert (qp_Œº4[i] != 0 && qp_Œº4[j] != 0)
                    # @assert (qp_Œº4[i]-qp_Œº4[j] != 0)

                    # ùêë‚Åª‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Åª‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢+Œº‚±º)) Ãá(1 - exp{-œÑ Ãá(1/Œº·µ¢ + 1/Œº‚±º)}) Ãáùë§‚±º
                    r‚Åª‚Å∫[i,j,n] = œñ_nSpec[n] * Z‚Åª‚Å∫[i,j] * (qp_Œº4[j] / (qp_Œº4[i] + qp_Œº4[j])) * (1 - exp.(-dœÑ_nSpec[n] * ((1 / qp_Œº4[i]) + (1 / qp_Œº4[j])))) * (wct2[j]) 
                    
                    if (qp_Œº4[i] == qp_Œº4[j])

                        # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) = (exp{-œÑ/Œº·µ¢} + œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) Ãá(œÑ/Œº·µ¢) Ãáexp{-œÑ/Œº·µ¢}) Ãáùë§·µ¢
                        if i == j
                            t‚Å∫‚Å∫[i,j,n] = exp(-dœÑ_nSpec[n] / qp_Œº4[i]) + œñ_nSpec[n] * Z‚Å∫‚Å∫[i,i] * (dœÑ_nSpec[n] / qp_Œº4[i]) * exp.(-dœÑ_nSpec[n] / qp_Œº4[i]) * wct2[i]
                        else
                            t‚Å∫‚Å∫[i,j,n] = œñ_nSpec[n] * Z‚Å∫‚Å∫[i,i] * (dœÑ_nSpec[n] / qp_Œº4[i]) * exp.(-dœÑ_nSpec[n] / qp_Œº4[i]) * wct2[i]
                        end
                    else
                    
                        # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢-Œº‚±º)) Ãá(exp{-œÑ/Œº·µ¢} - exp{-œÑ/Œº‚±º}) Ãáùë§‚±º
                        # (ùëñ ‚â† ùëó)
                        t‚Å∫‚Å∫[i,j,n] = œñ_nSpec[n] * Z‚Å∫‚Å∫[i,j] * (qp_Œº4[j] / (qp_Œº4[i] - qp_Œº4[j])) * (exp(-dœÑ_nSpec[n] / qp_Œº4[i]) - exp(-dœÑ_nSpec[n] / qp_Œº4[j])) * wct2[j]
                    end
                    if ndoubl < 1
                        ii = mod(i - 1, pol_type.n)
                        jj = mod(j - 1, pol_type.n)
                        if ((ii <= 1) & (jj <= 1)) | ((ii >= 2) & (jj >= 2))
                            r‚Å∫‚Åª[i,j,n] = r‚Åª‚Å∫[i,j,n]
                            t‚Åª‚Åª[i,j,n] = t‚Å∫‚Å∫[i,j,n]
                        else
                            r‚Å∫‚Åª[i,j,n] = r‚Åª‚Å∫[i,j,n]
                            t‚Åª‚Åª[i,j,n] = t‚Å∫‚Å∫[i,j,n]
                        end
                    end
                end
                if ndoubl > 0
                    @inbounds for i in 1:NquadN
                        ii = mod(i - 1, pol_type.n)    
                        if (ii >= 2)
                            r‚Åª‚Å∫[i,:,n] = r‚Åª‚Å∫[i,:,n]
                        end
                    end
                end
            end
            # @show dœÑ[1], œñ
            # @show I_static .- (d_qp * ((I_static .- Z‚Å∫‚Å∫ * d_wct) * dœÑ[1]))
            # @show t‚Å∫‚Å∫[:,:,1]
            # @show r‚Åª‚Å∫[:,:,1]
            # @show d_qp * Z‚Åª‚Å∫ * (d_wct * dœÑ[1])
        end

        
    else 
        # Note: œÑ is not defined here
        t‚Å∫‚Å∫[:] = Diagonal{exp(-œÑ ./ qp_Œº4)}
        t‚Åª‚Åª[:] = Diagonal{exp(-œÑ ./ qp_Œº4)}
    end    

end

function rt_elemental!(pol_type, dœÑ_nSpec, dœÑ, œñ_nSpec, œñ, Z‚Å∫‚Å∫, Z‚Åª‚Å∫, m, 
                              ndoubl, scatter, qp_Œº, wt_Œº, 
                              added_layer::AddedLayer, 
                              D::AbstractArray,
                              I_static::AbstractArray) where {FT}

    rt_elemental_helper!(pol_type, dœÑ_nSpec, dœÑ, œñ_nSpec, œñ, Z‚Å∫‚Å∫, Z‚Åª‚Å∫, m, ndoubl, scatter, qp_Œº, wt_Œº, added_layer, D, I_static)
    synchronize()
end