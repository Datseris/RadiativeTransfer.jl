"Simulates the full atmosphere from n distinct homogeneous layers"
function rt_interaction!(kn, R‚Åª‚Å∫, T‚Å∫‚Å∫, R‚Å∫‚Åª, T‚Åª‚Åª, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª)
                             
    # ToDo: Important output from this routine is R‚Åª‚Å∫, R‚Å∫‚Åª, T‚Å∫‚Å∫, T‚Åª‚Åª (can be renamed to ùêì‚Åª‚Åª, etc later)
    # Need to check with paper nomenclature. This is basically eqs. 23-28 in vSmartMOM)
    Nquadn = size(r‚Åª‚Å∫, 1)
    # kn = 1: no scattering in either the added layer or composite layer.
    # kn = 2: composite layer has no scattering but added layer does.
    # kn = 3: composite layer has scattering but added layer does not.
    # kn = 4: both composite layer and added layer have scattering.

    # Create temporary matrices
    I_static = one(similar(R‚Å∫‚Åª))
    aux1 = similar(R‚Å∫‚Åª)
    aux2 = similar(R‚Å∫‚Åª)
    aux3 = similar(R‚Å∫‚Åª)

    if kn==1
        # No scattering in either the added layer or the composite layer.
        T‚Åª‚Åª = t‚Åª‚Åª * T‚Åª‚Åª
        T‚Å∫‚Å∫ = t‚Å∫‚Å∫ * T‚Å∫‚Å∫
        
        return nothing 
    elseif kn==2
        # No scattering in inhomogeneous composite layer.
        # scattering in homogeneous layer which is added 
        # to the bottom of the composite layer.
        # Produces a new, scattering composite layer.
        M1=T‚Åª‚Åª
        M2=T‚Å∫‚Å∫
        R‚Åª‚Å∫[:] = M1 * r‚Åª‚Å∫ * M2
        R‚Å∫‚Åª[:] = r‚Å∫‚Åª
        T‚Å∫‚Å∫[:] = t‚Å∫‚Å∫ * M2
        T‚Åª‚Åª[:] = M1 * t‚Åª‚Åª
        return nothing 
    elseif kn==3
        # Scattering in inhomogeneous composite layer.
        # no scattering in homogeneous layer which is 
        # added to the bottom of the composite layer.
        # Produces a new, scattering composite layer.
        T‚Å∫‚Å∫[:] = t‚Å∫‚Å∫ * T‚Å∫‚Å∫
        T‚Åª‚Åª[:] = T‚Åª‚Åª * t‚Åª‚Åª
        R‚Å∫‚Åª[:] = t‚Å∫‚Å∫ * R‚Å∫‚Åª * t‚Åª‚Åª
        return nothing 
    elseif kn==4
        # Scattering in inhomogeneous composite layer.
        # scattering in homogeneous layer which is 
        # added to the bottom of the composite layer.
        # Produces a new, scattering composite layer.

        # M1 = (I - R‚Å∫‚Åª * r‚Åª‚Å∫) \ T‚Å∫‚Å∫
        mul!(aux1, R‚Å∫‚Åª, r‚Åª‚Å∫)        # R‚Å∫‚Åª * r‚Åª‚Å∫
        @. aux1 = I_static - aux1   # (I - R‚Å∫‚Åª * r‚Åª‚Å∫)
        ldiv!(aux2, qr!(aux1), T‚Å∫‚Å∫) # M1 = (I - R‚Å∫‚Åª * r‚Åª‚Å∫) \ T‚Å∫‚Å∫

        # t_R‚Åª‚Å∫ = R‚Åª‚Å∫ + T‚Åª‚Åª * r‚Åª‚Å∫ * M1
        mul!(aux1, r‚Åª‚Å∫, aux2)   # r‚Åª‚Å∫ * M1
        mul!(aux3, T‚Åª‚Åª, aux1)   # T‚Åª‚Åª * r‚Åª‚Å∫ * M1
        @. R‚Åª‚Å∫ = R‚Åª‚Å∫ + aux3     # t_R‚Åª‚Å∫ = R‚Åª‚Å∫ + T‚Åª‚Åª * r‚Åª‚Å∫ * M1
        
        # t_T‚Å∫‚Å∫ = t‚Å∫‚Å∫ * M1
        mul!(T‚Å∫‚Å∫, t‚Å∫‚Å∫, aux2)

        # Repeating for mirror-reflected directions

        # M1 = (I - r‚Åª‚Å∫ * R‚Å∫‚Åª) \ t‚Åª‚Åª
        mul!(aux1, r‚Åª‚Å∫, R‚Å∫‚Åª)        # r‚Åª‚Å∫ * R‚Å∫‚Åª
        @. aux1 = I_static - aux1   # (I - r‚Åª‚Å∫ * R‚Å∫‚Åª)
        ldiv!(aux2, qr!(aux1), t‚Åª‚Åª) # M1 = (I - r‚Åª‚Å∫ * R‚Å∫‚Åª) \ t‚Åª‚Åª

        # t_R‚Å∫‚Åª = r‚Å∫‚Åª + t‚Å∫‚Å∫ * R‚Å∫‚Åª * M1
        mul!(aux3, R‚Å∫‚Åª, aux2)   # R‚Å∫‚Åª * M1
        mul!(aux1, t‚Å∫‚Å∫, aux3)   # t‚Å∫‚Å∫ * R‚Å∫‚Åª * M1
        @. R‚Å∫‚Åª = r‚Å∫‚Åª + aux1     # t_R‚Å∫‚Åª = r‚Å∫‚Åª + t‚Å∫‚Å∫ * R‚Å∫‚Åª * M1

        # t_T‚Åª‚Åª = T‚Å∫‚Å∫ * M1
        mul!(T‚Åª‚Åª, T‚Å∫‚Å∫, aux2)
                 
        return nothing 
    end
end