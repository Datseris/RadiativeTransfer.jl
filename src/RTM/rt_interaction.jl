"Simulates the full atmosphere from n distinct homogeneous layers"
# function rt_interaction!(kn, R‚Åª‚Å∫, T‚Å∫‚Å∫, R‚Å∫‚Åª, T‚Åª‚Åª, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª)
#     aux2 = similar(R‚Å∫‚Åª);# I_static = one(similar(R‚Å∫‚Åª))
#     aux3 = similar(R‚Å∫‚Åª); 
#     aux1 = similar(R‚Å∫‚Åª)                     
#     # ToDo: Important output from this routine is R‚Åª‚Å∫, R‚Å∫‚Åª, T‚Å∫‚Å∫, T‚Åª‚Åª (can be renamed to ùêì‚Åª‚Åª, etc later)
#     # Need to check with paper nomenclature. This is basically eqs. 23-28 in vSmartMOM)
#     Nquadn = size(r‚Åª‚Å∫, 1)
#     # kn = 1: no scattering in either the added layer or composite layer.
#     # kn = 2: composite layer has no scattering but added layer does.
#     # kn = 3: composite layer has scattering but added layer does not.
#     # kn = 4: both composite layer and added layer have scattering.

#     # Create temporary matrices
#     I_static = one(similar(R‚Å∫‚Åª))
#     # aux1 = similar(R‚Å∫‚Åª)
#     # aux2 = similar(R‚Å∫‚Åª)
#     # aux3 = similar(R‚Å∫‚Åª)

#     if kn == 1
#         # No scattering in either the added layer or the composite layer.
#         T‚Åª‚Åª = t‚Åª‚Åª * T‚Åª‚Åª
#         T‚Å∫‚Å∫ = t‚Å∫‚Å∫ * T‚Å∫‚Å∫
        
#         return nothing 
#     elseif kn == 2
#         # No scattering in inhomogeneous composite layer.
#         # scattering in homogeneous layer which is added 
#         # to the bottom of the composite layer.
#         # Produces a new, scattering composite layer.
#         M1 = T‚Åª‚Åª
#         M2 = T‚Å∫‚Å∫
#         R‚Åª‚Å∫[:] = M1 * r‚Åª‚Å∫ * M2
#         R‚Å∫‚Åª[:] = r‚Å∫‚Åª
#         T‚Å∫‚Å∫[:] = t‚Å∫‚Å∫ * M2
#         T‚Åª‚Åª[:] = M1 * t‚Åª‚Åª
#         return nothing 
#     elseif kn == 3
#         # Scattering in inhomogeneous composite layer.
#         # no scattering in homogeneous layer which is 
#         # added to the bottom of the composite layer.
#         # Produces a new, scattering composite layer.
#         T‚Å∫‚Å∫[:] = t‚Å∫‚Å∫ * T‚Å∫‚Å∫
#         T‚Åª‚Åª[:] = T‚Åª‚Åª * t‚Åª‚Åª
#         R‚Å∫‚Åª[:] = t‚Å∫‚Å∫ * R‚Å∫‚Åª * t‚Åª‚Åª
#         return nothing 
#     elseif kn == 4
#         # Scattering in inhomogeneous composite layer.
#         # scattering in homogeneous layer which is 
#         # added to the bottom of the composite layer.
#         # Produces a new, scattering composite layer.

#         # M1 = (I - R‚Å∫‚Åª * r‚Åª‚Å∫) \ T‚Å∫‚Å∫
#         mul!(aux1, R‚Å∫‚Åª, r‚Åª‚Å∫)        # R‚Å∫‚Åª * r‚Åª‚Å∫
#         @. aux1 = I_static - aux1   # (I - R‚Å∫‚Åª * r‚Åª‚Å∫)
#         ldiv!(aux2, qr!(aux1), T‚Å∫‚Å∫) # M1 = (I - R‚Å∫‚Åª * r‚Åª‚Å∫) \ T‚Å∫‚Å∫

#         # t_R‚Åª‚Å∫ = R‚Åª‚Å∫ + T‚Åª‚Åª * r‚Åª‚Å∫ * M1
#         mul!(aux1, r‚Åª‚Å∫, aux2)   # r‚Åª‚Å∫ * M1
#         mul!(aux3, T‚Åª‚Åª, aux1)   # T‚Åª‚Åª * r‚Åª‚Å∫ * M1
#         @. R‚Åª‚Å∫ = R‚Åª‚Å∫ + aux3     # t_R‚Åª‚Å∫ = R‚Åª‚Å∫ + T‚Åª‚Åª * r‚Åª‚Å∫ * M1
        
#         # t_T‚Å∫‚Å∫ = t‚Å∫‚Å∫ * M1
#         mul!(T‚Å∫‚Å∫, t‚Å∫‚Å∫, aux2)

#         # Repeating for mirror-reflected directions

#         # M1 = (I - r‚Åª‚Å∫ * R‚Å∫‚Åª) \ t‚Åª‚Åª
#         mul!(aux1, r‚Åª‚Å∫, R‚Å∫‚Åª)        # r‚Åª‚Å∫ * R‚Å∫‚Åª
#         @. aux1 = I_static - aux1   # (I - r‚Åª‚Å∫ * R‚Å∫‚Åª)
#         ldiv!(aux2, qr!(aux1), t‚Åª‚Åª) # M1 = (I - r‚Åª‚Å∫ * R‚Å∫‚Åª) \ t‚Åª‚Åª

#         # t_R‚Å∫‚Åª = r‚Å∫‚Åª + t‚Å∫‚Å∫ * R‚Å∫‚Åª * M1
#         mul!(aux3, R‚Å∫‚Åª, aux2)   # R‚Å∫‚Åª * M1
#         mul!(aux1, t‚Å∫‚Å∫, aux3)   # t‚Å∫‚Å∫ * R‚Å∫‚Åª * M1
#         @. R‚Å∫‚Åª = r‚Å∫‚Åª + aux1     # t_R‚Å∫‚Åª = r‚Å∫‚Åª + t‚Å∫‚Å∫ * R‚Å∫‚Åª * M1

#         # t_T‚Åª‚Åª = T‚Å∫‚Å∫ * M1
#         mul!(T‚Åª‚Åª, T‚Å∫‚Å∫, aux2)
                 
#         return nothing 
#     end
# end

# function rt_interaction!(R‚Åª‚Å∫, T‚Å∫‚Å∫, R‚Å∫‚Åª, T‚Åª‚Åª, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª, aux1, aux2, aux3)
#     # M1 = (I - R‚Å∫‚Åª * r‚Åª‚Å∫) \ T‚Å∫‚Å∫;aux1 = similar(R‚Å∫‚Åª)
#         # aux2 = similar(R‚Å∫‚Åª);#I_static = one(similar(R‚Å∫‚Åª))
#         # aux3 = similar(R‚Å∫‚Åª); 
#         # aux1 = similar(R‚Å∫‚Åª)
#         I_static = one(similar(R‚Å∫‚Åª))
#         mul!(aux1, R‚Å∫‚Åª, r‚Åª‚Å∫)        # R‚Å∫‚Åª * r‚Åª‚Å∫
#         @. aux1 = I_static - aux1   # (I - R‚Å∫‚Åª * r‚Åª‚Å∫)
#         ldiv!(aux2, qr!(aux1), T‚Å∫‚Å∫) # M1 = (I - R‚Å∫‚Åª * r‚Åª‚Å∫) \ T‚Å∫‚Å∫

#         # t_R‚Åª‚Å∫ = R‚Åª‚Å∫ + T‚Åª‚Åª * r‚Åª‚Å∫ * M1
#         mul!(aux1, r‚Åª‚Å∫, aux2)   # r‚Åª‚Å∫ * M1
#         mul!(aux3, T‚Åª‚Åª, aux1)   # T‚Åª‚Åª * r‚Åª‚Å∫ * M1
#         @. R‚Åª‚Å∫ = R‚Åª‚Å∫ + aux3     # t_R‚Åª‚Å∫ = R‚Åª‚Å∫ + T‚Åª‚Åª * r‚Åª‚Å∫ * M1
        
#         # t_T‚Å∫‚Å∫ = t‚Å∫‚Å∫ * M1
#         mul!(T‚Å∫‚Å∫, t‚Å∫‚Å∫, aux2)

#         # Repeating for mirror-reflected directions

#         # M1 = (I - r‚Åª‚Å∫ * R‚Å∫‚Åª) \ t‚Åª‚Åª
#         mul!(aux1, r‚Åª‚Å∫, R‚Å∫‚Åª)        # r‚Åª‚Å∫ * R‚Å∫‚Åª
#         @. aux1 = I_static - aux1   # (I - r‚Åª‚Å∫ * R‚Å∫‚Åª)
#         ldiv!(aux2, qr!(aux1), t‚Åª‚Åª) # M1 = (I - r‚Åª‚Å∫ * R‚Å∫‚Åª) \ t‚Åª‚Åª

#         # t_R‚Å∫‚Åª = r‚Å∫‚Åª + t‚Å∫‚Å∫ * R‚Å∫‚Åª * M1
#         mul!(aux3, R‚Å∫‚Åª, aux2)   # R‚Å∫‚Åª * M1
#         mul!(aux1, t‚Å∫‚Å∫, aux3)   # t‚Å∫‚Å∫ * R‚Å∫‚Åª * M1
#         @. R‚Å∫‚Åª = r‚Å∫‚Åª + aux1     # t_R‚Å∫‚Åª = r‚Å∫‚Åª + t‚Å∫‚Å∫ * R‚Å∫‚Åª * M1

#         # t_T‚Åª‚Åª = T‚Å∫‚Å∫ * M1
#         mul!(T‚Åª‚Åª, T‚Å∫‚Å∫, aux2)
                 
#         return nothing 
# end


function rt_interaction_helper!(R‚Åª‚Å∫::AbstractArray{FT,3}, 
                         T‚Å∫‚Å∫::AbstractArray{FT,3}, 
                         R‚Å∫‚Åª::AbstractArray{FT,3}, 
                         T‚Åª‚Åª::AbstractArray{FT,3}, 
                         r‚Åª‚Å∫::AbstractArray{FT,3}, 
                         t‚Å∫‚Å∫::AbstractArray{FT,3}, 
                         r‚Å∫‚Åª::AbstractArray{FT,3}, 
                         t‚Åª‚Åª::AbstractArray{FT,3},
                         I_static::AbstractArray) where {FT}

    
    R‚Åª‚Å∫_ = R‚Åª‚Å∫ # repeat(R‚Åª‚Å∫, 1, 1, 1)
    T‚Å∫‚Å∫_ = T‚Å∫‚Å∫ # repeat(T‚Å∫‚Å∫, 1, 1, 1)
    R‚Å∫‚Åª_ = R‚Å∫‚Åª # repeat(R‚Å∫‚Åª, 1, 1, 1)
    T‚Åª‚Åª_ = T‚Åª‚Åª # repeat(T‚Åª‚Åª, 1, 1, 1)

    r‚Åª‚Å∫_ = r‚Åª‚Å∫
    t‚Å∫‚Å∫_ = t‚Å∫‚Å∫
    r‚Å∫‚Åª_ = r‚Å∫‚Åª
    t‚Åª‚Åª_ = t‚Åª‚Åª

    # r‚Åª‚Å∫_ = repeat(r‚Åª‚Å∫, 1, 1, 1)
    # t‚Å∫‚Å∫_ = repeat(t‚Å∫‚Å∫, 1, 1, 1)
    # r‚Å∫‚Åª_ = repeat(r‚Å∫‚Åª, 1, 1, 1)
    # t‚Åª‚Åª_ = repeat(t‚Åª‚Åª, 1, 1, 1)
    
    aux1 = similar(R‚Åª‚Å∫_)
    aux2 = similar(R‚Åª‚Å∫_)
    aux3 = similar(R‚Åª‚Å∫_)

    # Compute M1 = (I - R‚Å∫‚Åª * r‚Åª‚Å∫) \ T‚Å∫‚Å∫
    aux1 = I_static .- R‚Å∫‚Åª_ ‚ä† r‚Åª‚Å∫_
    batch_solve!(aux2, aux1, T‚Å∫‚Å∫_)

    # Compute t_R‚Åª‚Å∫ = R‚Åª‚Å∫ + T‚Åª‚Åª * r‚Åª‚Å∫ * M1
    aux1 = r‚Åª‚Å∫_ ‚ä† aux2  # r‚Åª‚Å∫ * M1
    aux3 = T‚Åª‚Åª_ ‚ä† aux1  # 
    R‚Åª‚Å∫_  = R‚Åª‚Å∫_ + aux3

    # T‚Å∫‚Å∫ = t‚Å∫‚Å∫ * M1
    T‚Å∫‚Å∫_ = t‚Å∫‚Å∫_ ‚ä† aux2

    # Repeating for mirror-reflected directions
    # Compute M1 = (I - r‚Åª‚Å∫ * R‚Å∫‚Åª) \ t‚Åª‚Åª
    aux1 = I_static .- r‚Åª‚Å∫_ ‚ä† R‚Å∫‚Åª_
    batch_solve!(aux2, aux1, t‚Åª‚Åª_)

    # t_R‚Å∫‚Åª = r‚Å∫‚Åª + t‚Å∫‚Å∫ * R‚Å∫‚Åª * M1
    aux3 = R‚Å∫‚Åª_ ‚ä† aux2
    aux1 = t‚Å∫‚Å∫_ ‚ä† aux3
    R‚Å∫‚Åª_  = r‚Å∫‚Åª_ + aux1
    T‚Åª‚Åª_  = T‚Å∫‚Å∫_ ‚ä† aux2

    @. r‚Åª‚Å∫ = r‚Åª‚Å∫_[:,:,1]
    @. t‚Å∫‚Å∫ = t‚Å∫‚Å∫_[:,:,1]
    @. r‚Å∫‚Åª = r‚Å∫‚Åª_[:,:,1]
    @. t‚Åª‚Åª = t‚Åª‚Åª_[:,:,1]

    @. R‚Åª‚Å∫ = R‚Åª‚Å∫_[:,:,1]
    @. T‚Å∫‚Å∫ = T‚Å∫‚Å∫_[:,:,1]
    @. R‚Å∫‚Åª = R‚Å∫‚Åª_[:,:,1]
    @. T‚Åª‚Åª = T‚Åª‚Åª_[:,:,1]

end

function rt_interaction!(R‚Åª‚Å∫::AbstractArray{FT,3}, T‚Å∫‚Å∫::AbstractArray{FT,3}, 
                         R‚Å∫‚Åª::AbstractArray{FT,3}, T‚Åª‚Åª::AbstractArray{FT,3}, 
                         r‚Åª‚Å∫::AbstractArray{FT,3}, t‚Å∫‚Å∫::AbstractArray{FT,3}, 
                         r‚Å∫‚Åª::AbstractArray{FT,3}, t‚Åª‚Åª::AbstractArray{FT,3},
                         I_static::AbstractArray) where {FT}

    rt_interaction_helper!(R‚Åª‚Å∫, T‚Å∫‚Å∫, R‚Å∫‚Åª, T‚Åª‚Åª, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª, I_static)
    synchronize()

end