"Simulates the full atmosphere from n distinct homogeneous layers"
function rt_interaction_helper!(kn::Int, 
                                composite_layer::CompositeLayer{FT}, 
                                added_layer::AddedLayer{FT},
                                I_static::AbstractArray{FT}) where {FT}

    @unpack r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫ = added_layer
    @unpack R‚Åª‚Å∫, R‚Å∫‚Åª, T‚Å∫‚Å∫, T‚Åª‚Åª = composite_layer
    # ToDo: Important output from this routine is R‚Åª‚Å∫, R‚Å∫‚Åª, T‚Å∫‚Å∫, T‚Åª‚Åª (can be renamed to ùêì‚Åª‚Åª, etc later)
    # Need to check with paper nomenclature. This is basically eqs. 23-28 in vSmartMOM)

    # kn = 1: no scattering in either the added layer or composite layer.
    # kn = 2: composite layer has no scattering but added layer does.
    # kn = 3: composite layer has scattering but added layer does not.
    # kn = 4: both composite layer and added layer have scattering.
    
    # ----------------

    if kn == 1

        # No scattering in either the added layer or the composite layer.
        T‚Åª‚Åª[:] = t‚Åª‚Åª ‚ä† T‚Åª‚Åª
        T‚Å∫‚Å∫[:] = t‚Å∫‚Å∫ ‚ä† T‚Å∫‚Å∫
        return nothing

    elseif kn == 2

        # No scattering in inhomogeneous composite layer.
        # Scattering in homogeneous layer, added to bottom of the composite layer.
        # Produces a new, scattering composite layer.
        R‚Åª‚Å∫[:] = T‚Åª‚Åª * r‚Åª‚Å∫ * T‚Å∫‚Å∫
        R‚Å∫‚Åª[:] = r‚Å∫‚Åª
        T‚Å∫‚Å∫[:] = t‚Å∫‚Å∫ * T‚Å∫‚Å∫
        T‚Åª‚Åª[:] = T‚Åª‚Åª * t‚Åª‚Åª
        return nothing 

    elseif kn == 3

        # Scattering in inhomogeneous composite layer.
        # no scattering in homogeneous layer which is 
        # added to the bottom of the composite layer.
        # Produces a new, scattering composite layer.
        T‚Å∫‚Å∫[:] = t‚Å∫‚Å∫ * T‚Å∫‚Å∫
        T‚Åª‚Åª[:] = T‚Åª‚Åª * t‚Åª‚Åª
        R‚Å∫‚Åª[:] = t‚Å∫‚Å∫ * R‚Å∫‚Åª * t‚Åª‚Åª
        return nothing 

    elseif kn == 4
        
        # Scattering in inhomogeneous composite layer.
        # scattering in homogeneous layer which is 
        # added to the bottom of the composite layer.
        # Produces a new, scattering composite layer.

        # Used to store `(I - R‚Å∫‚Åª * r‚Åª‚Å∫)‚Åª¬π * T‚Å∫‚Å∫`
        tmp_inv = similar(t‚Å∫‚Å∫)

        # Compute and store `(I - R‚Å∫‚Åª * r‚Åª‚Å∫)‚Åª¬π * T‚Å∫‚Å∫`
        @timeit "interaction inv1" batch_solve!(tmp_inv, I_static .- R‚Å∫‚Åª ‚ä† r‚Åª‚Å∫, T‚Å∫‚Å∫)

        composite_layer.R‚Åª‚Å∫[:] = R‚Åª‚Å∫ + (T‚Åª‚Åª ‚ä† r‚Åª‚Å∫ ‚ä† tmp_inv)
        composite_layer.T‚Å∫‚Å∫[:] = t‚Å∫‚Å∫ ‚ä† tmp_inv

        # Repeating for mirror-reflected directions

        # Compute and store `(I - r‚Åª‚Å∫ * R‚Å∫‚Åª)‚Åª¬π * t‚Åª‚Åª`
        @timeit "interaction inv2" batch_solve!(tmp_inv, I_static .- r‚Åª‚Å∫ ‚ä† R‚Å∫‚Åª, t‚Åª‚Åª)

        composite_layer.R‚Å∫‚Åª[:] = r‚Å∫‚Åª + t‚Å∫‚Å∫ ‚ä† R‚Å∫‚Åª ‚ä† tmp_inv
        composite_layer.T‚Åª‚Åª[:] = T‚Å∫‚Å∫ ‚ä† tmp_inv

        return nothing
        
    else 
        error("kn is ($kn), must be in (1, 2, 3, 4)")
    end

    end

function rt_interaction!(kn::Int, 
                        composite_layer::CompositeLayer{FT}, 
                        added_layer::AddedLayer{FT},
                        I_static::AbstractArray{FT}) where {FT}

    rt_interaction_helper!(kn, composite_layer, added_layer, I_static)
    synchronize()

end