# atmospheric RTM
function RTM(polarization_type,œÑRayl,œñRayl, œÑAer, œñAer, f·µó, qp_Œº, Ltrunc, Nz, aerosol_optics, GreekRayleigh)
    FT = eltype(œÑRayl)
    #get vertical grid
    #get solar+viewing geometry, compute streams
    #compute Aersol SSP
    #compute Rayleigh SSP

    for m=0:Ltrunc
        #compute Zmp_Aer, Zpp_Aer, Zmp_Rayl, Zpp_Rayl
        # For m>=3, Rayleigh matrices will be 0, can catch with if statement if wanted 
        Raylùêô‚Å∫‚Å∫, Raylùêô‚Åª‚Å∫ = PhaseFunction.compute_Z_moments(polarization_type, qp_Œº, GreekRayleigh, m);
        dims = size(Raylùêô‚Å∫‚Å∫)
        nAer = length(aerosol_optics)

        Aerùêô‚Å∫‚Å∫ = [zeros(FT,dims) for i in 1:nAer]
        Aerùêô‚Åª‚Å∫ = similar(Aerùêô‚Å∫‚Å∫)

        for i = 1:nAer
            Aerùêô‚Å∫‚Å∫[i], Aerùêô‚Åª‚Å∫[i] = PhaseFunction.compute_Z_moments(polarization_type, qp_Œº, aerosol_optics[i].greek_coefs, m)
        end
        
        # Homogenous R and T matrices
        r‚Åª‚Å∫ = zeros(dims)
        t‚Å∫‚Å∫ = zeros(dims)
        r‚Å∫‚Åª = zeros(dims)
        t‚Åª‚Åª = zeros(dims)
        # Composite layer R and T matrices
        R‚Åª‚Å∫ = zeros(dims)
        R‚Å∫‚Åª = zeros(dims)
        T‚Å∫‚Å∫ = zeros(dims)
        T‚Åª‚Åª = zeros(dims)

        # loop over vertical layers:
        for iz=1:Nz  #Count from TOA to BOA
            œÑ, œñ, Z‚Å∫‚Å∫, Z‚Åª‚Å∫ = construct_atm_layer(m, iz, Nquad4, Naer, œÑRayl[iz], œÑAer[iz], œñRayl[iz], œñAer, f·µó, RaylZ‚Å∫‚Å∫, RaylZ‚Åª‚Å∫, AerZ‚Å∫‚Å∫, AerZ‚Åª‚Å∫)
            dœÑ_max = min(œÑ, min(qp_Œº)/5)
            doubling_number!(Stokes_IQUV, dœÑ_max, œÑ, dœÑ, ndoubl)
            scatter=0
            if (sum(œÑAer)>1.e-8)
                scatter=1
            elseif (œÑRayl>1.e-8) & (m<3)
                scatter=1
            end        
            if (scatter)
                r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª = rt_elemental(polarization_type, dœÑ, œñ, bb=0, m, iz, ndoubl, scatter)
                rt_doubling!(polarization_type, dœÑ, œÑ, m, ndoubl, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª)
            else
                r‚Åª‚Å∫ = 0
                r‚Å∫‚Åª = 0
                for i in 1:Nquad4
                    ii=1+floor((i-1)/4)
                t‚Å∫‚Å∫[i,i] = exp(-œÑ/qp_Œº[ii])
                t‚Åª‚Åª[i,i] = exp(-œÑ/qp_Œº[ii])
            end
            if (iz==1)
                if (scatter==1)
                    kn=4
                else
                    kn=1
                end
            elseif 
                if (kn==1) & (scatter==0)
                    kn = 1
                elseif (kn==1) & (scatter==1)
                    kn = 2
                elseif (kn>1) & (scatter==0)
                    kn = 3
                elseif (kn>1) & (scatter==1)
                    kn = 4
                end 
            end
            if (iz==1)
                T‚Å∫‚Å∫ = t‚Å∫‚Å∫
                T‚Åª‚Åª = t‚Åª‚Åª
                R‚Åª‚Å∫ = r‚Åª‚Å∫
                R‚Å∫‚Åª = r‚Å∫‚Åª
            elseif
                rt_interaction!(Stokes_IQUV, kn, iz, m, T‚Å∫‚Å∫, T‚Åª‚Åª, R‚Åª‚Å∫, R‚Å∫‚Åª, t‚Å∫‚Å∫, t‚Åª‚Åª, r‚Åª‚Å∫, r‚Å∫‚Åª)
            end
        end #z
    end #m
end