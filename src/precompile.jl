function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    Base.precompile(Tuple{Core.kwftype(typeof(RadiativeTransfer.CrossSection.compute_absorption_cross_section)),NamedTuple{(:wavelength_flag, :wing_cutoff, :vmr, :CEF, :architecture),Tuple{Bool,Int64,Int64,ErfcHumliErrorFunctionVoigt,RadiativeTransfer.Architectures.CPU}},typeof(compute_absorption_cross_section),HitranTable{Float64},Voigt,Array{Float64,1},Int64,Int64})
    Base.precompile(Tuple{Core.kwftype(typeof(RadiativeTransfer.CrossSection.make_hitran_model)),NamedTuple{(:CEF,),Tuple{ErfcHumliErrorFunctionVoigt}},typeof(make_hitran_model),HitranTable{Float64},Voigt})
    Base.precompile(Tuple{Core.kwftype(typeof(RadiativeTransfer.CrossSection.make_interpolation_model)),NamedTuple{(:CEF,),Tuple{ErfcHumliErrorFunctionVoigt}},typeof(make_interpolation_model),HitranTable{Float64},Voigt,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},StepRange{Int64,Int64},StepRange{Int64,Int64}})
    Base.precompile(Tuple{Core.kwftype(typeof(RadiativeTransfer.CrossSection.read_hitran)),NamedTuple{(:mol, :iso, :ν_min),Tuple{Int64,Int64,Int64}},typeof(read_hitran),String})
    Base.precompile(Tuple{Core.kwftype(typeof(RadiativeTransfer.CrossSection.read_hitran)),NamedTuple{(:mol, :iso, :ν_min, :ν_max),NTuple{4,Int64}},typeof(read_hitran),String})
    Base.precompile(Tuple{Core.kwftype(typeof(RadiativeTransfer.PhaseFunction.gauleg)),NamedTuple{(:norm,),Tuple{Bool}},typeof(RadiativeTransfer.PhaseFunction.gauleg),Int64,Float64,Float64})
    Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(RadiativeTransfer.PhaseFunction.get_n_max),Tuple{Array{Float64,1}}}})
    Base.precompile(Tuple{typeof(KernelAbstractions.__thread_run),Int64,Int64,Int64,KernelAbstractions.Kernel{KernelAbstractions.CPU,KernelAbstractions.NDIteration.DynamicSize,KernelAbstractions.NDIteration.DynamicSize,typeof(RadiativeTransfer.CrossSection.cpu_line_shape!)},Tuple{Int64},KernelAbstractions.NDIteration.NDRange{1,KernelAbstractions.NDIteration.DynamicSize,KernelAbstractions.NDIteration.DynamicSize,CartesianIndices{1,Tuple{Base.OneTo{Int64}}},CartesianIndices{1,Tuple{Base.OneTo{Int64}}}},Tuple{SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Float64,Float64,Float64,Float64,Float64,Voigt,ErfcHumliErrorFunctionVoigt},KernelAbstractions.NDIteration.DynamicCheck})
    Base.precompile(Tuple{typeof(KernelAbstractions.__thread_run),Int64,Int64,Int64,KernelAbstractions.Kernel{KernelAbstractions.CPU,KernelAbstractions.NDIteration.DynamicSize,KernelAbstractions.NDIteration.DynamicSize,typeof(RadiativeTransfer.CrossSection.cpu_line_shape!)},Tuple{Int64},KernelAbstractions.NDIteration.NDRange{1,KernelAbstractions.NDIteration.DynamicSize,KernelAbstractions.NDIteration.DynamicSize,CartesianIndices{1,Tuple{Base.OneTo{Int64}}},CartesianIndices{1,Tuple{Base.OneTo{Int64}}}},Tuple{SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Float64,Float64,Float64,Float64,Float64,Voigt,ErfcHumliErrorFunctionVoigt},KernelAbstractions.NDIteration.NoDynamicCheck})
    Base.precompile(Tuple{typeof(RadiativeTransfer.CrossSection.AtoB),Int64,Array{Float64,1},Array{Float64,1},Int64})
    Base.precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_aerosol_optical_properties),RadiativeTransfer.PhaseFunction.MieModel{RadiativeTransfer.PhaseFunction.NAI2}})
    Base.precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_aerosol_optical_properties),RadiativeTransfer.PhaseFunction.MieModel{RadiativeTransfer.PhaseFunction.PCW}})
    Base.precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_anbn),RadiativeTransfer.PhaseFunction.UnivariateAerosol{Core.Float64,Core.Float64},Float64,Array{Float64,1}})
    Base.precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_avg_C_scatt_ext),Float64,Array{Complex{Float64},2},Array{Complex{Float64},2},Array{Float64,1}})
    Base.precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_legendre_poly),Array{Float64,1},Int64})
    Base.precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_mie_ab!),Float64,Complex{Float64},Array{Complex{Float64},1},Array{Complex{Float64},1},Array{Complex{Float64},1}})
    Base.precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_mie_π_τ),Array{Float64,1},Int64})
    Base.precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.load_wigner_values),String})
    Base.precompile(Tuple{typeof(RadiativeTransfer.__init__)})
    Base.precompile(Tuple{typeof(absorption_cross_section),InterpolationModel,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Int64,Int64})
    Base.precompile(Tuple{typeof(isapprox),RadiativeTransfer.PhaseFunction.AerosolOptics{Core.Float64},RadiativeTransfer.PhaseFunction.AerosolOptics{Core.Float64}})
    Base.precompile(Tuple{typeof(isapprox),RadiativeTransfer.PhaseFunction.GreekCoefs{Core.Float64},RadiativeTransfer.PhaseFunction.GreekCoefs{Core.Float64}})
    isdefined(KernelAbstractions, Symbol("#30#31")) && Base.precompile(Tuple{getfield(KernelAbstractions, Symbol("#30#31"))})

    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    isdefined(RadiativeTransfer, Symbol("##compute_absorption_cross_section#31")) && precompile(Tuple{getfield(RadiativeTransfer.CrossSection, Symbol("##compute_absorption_cross_section#31")), Bool, Int64, Int64, RadiativeTransfer.CrossSection.ErfcHumliErrorFunctionVoigt, RadiativeTransfer.Architectures.CPU, typeof(RadiativeTransfer.CrossSection.compute_absorption_cross_section), RadiativeTransfer.CrossSection.HitranTable{Float64}, RadiativeTransfer.CrossSection.Voigt, Array{Float64, 1}, Int64, Int64})
    isdefined(RadiativeTransfer, Symbol("##make_interpolation_model#24")) && precompile(Tuple{getfield(RadiativeTransfer.CrossSection, Symbol("##make_interpolation_model#24")), Bool, Int64, Int64, RadiativeTransfer.CrossSection.ErfcHumliErrorFunctionVoigt, RadiativeTransfer.Architectures.CPU, typeof(RadiativeTransfer.CrossSection.make_interpolation_model), RadiativeTransfer.CrossSection.HitranTable{Float64}, RadiativeTransfer.CrossSection.Voigt, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}})
    isdefined(RadiativeTransfer, Symbol("##qoft!#23")) && precompile(Tuple{getfield(RadiativeTransfer.CrossSection, Symbol("##qoft!#23")), Base.Dict{Any, Any}, Base.Dict{Any, Any}, typeof(RadiativeTransfer.CrossSection.qoft!), Int64, Int64, Int64, Float64, Array{Float64, 1}})
    isdefined(RadiativeTransfer, Symbol("##read_hitran#11")) && precompile(Tuple{getfield(RadiativeTransfer.CrossSection, Symbol("##read_hitran#11")), Int64, Int64, Int64, Float64, typeof(RadiativeTransfer.CrossSection.read_hitran), String})
    isdefined(RadiativeTransfer, Symbol("##read_hitran#11")) && precompile(Tuple{getfield(RadiativeTransfer.CrossSection, Symbol("##read_hitran#11")), Int64, Int64, Int64, Int64, typeof(RadiativeTransfer.CrossSection.read_hitran), String})
    isdefined(RadiativeTransfer, Symbol("#compute_absorption_cross_section##kw")) && precompile(Tuple{getfield(RadiativeTransfer.CrossSection, Symbol("#compute_absorption_cross_section##kw")), NamedTuple{(:wavelength_flag, :wing_cutoff, :vmr, :CEF, :architecture), Tuple{Bool, Int64, Int64, RadiativeTransfer.CrossSection.ErfcHumliErrorFunctionVoigt, RadiativeTransfer.Architectures.CPU}}, typeof(RadiativeTransfer.CrossSection.compute_absorption_cross_section), RadiativeTransfer.CrossSection.HitranTable{Float64}, RadiativeTransfer.CrossSection.Voigt, Array{Float64, 1}, Int64, Int64})
    isdefined(RadiativeTransfer, Symbol("#gauleg##kw")) && precompile(Tuple{getfield(RadiativeTransfer.PhaseFunction, Symbol("#gauleg##kw")), NamedTuple{(:norm,), Tuple{Bool}}, typeof(RadiativeTransfer.PhaseFunction.gauleg), Int64, Float64, Float64})
    isdefined(RadiativeTransfer, Symbol("#make_hitran_model##kw")) && precompile(Tuple{getfield(RadiativeTransfer.CrossSection, Symbol("#make_hitran_model##kw")), NamedTuple{(:CEF,), Tuple{RadiativeTransfer.CrossSection.ErfcHumliErrorFunctionVoigt}}, typeof(RadiativeTransfer.CrossSection.make_hitran_model), RadiativeTransfer.CrossSection.HitranTable{Float64}, RadiativeTransfer.CrossSection.Voigt})
    isdefined(RadiativeTransfer, Symbol("#make_interpolation_model##kw")) && precompile(Tuple{getfield(RadiativeTransfer.CrossSection, Symbol("#make_interpolation_model##kw")), NamedTuple{(:CEF,), Tuple{RadiativeTransfer.CrossSection.ErfcHumliErrorFunctionVoigt}}, typeof(RadiativeTransfer.CrossSection.make_interpolation_model), RadiativeTransfer.CrossSection.HitranTable{Float64}, RadiativeTransfer.CrossSection.Voigt, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}})
    isdefined(RadiativeTransfer, Symbol("#read_hitran##kw")) && precompile(Tuple{getfield(RadiativeTransfer.CrossSection, Symbol("#read_hitran##kw")), NamedTuple{(:iso, :ν_min, :ν_max), Tuple{Int64, Int64, Int64}}, typeof(RadiativeTransfer.CrossSection.read_hitran), String})
    isdefined(RadiativeTransfer, Symbol("#read_hitran##kw")) && precompile(Tuple{getfield(RadiativeTransfer.CrossSection, Symbol("#read_hitran##kw")), NamedTuple{(:mol, :iso), Tuple{Int64, Int64}}, typeof(RadiativeTransfer.CrossSection.read_hitran), String})
    isdefined(RadiativeTransfer, Symbol("#read_hitran##kw")) && precompile(Tuple{getfield(RadiativeTransfer.CrossSection, Symbol("#read_hitran##kw")), NamedTuple{(:mol, :iso, :ν_max), Tuple{Int64, Int64, Int64}}, typeof(RadiativeTransfer.CrossSection.read_hitran), String})
    isdefined(RadiativeTransfer, Symbol("#read_hitran##kw")) && precompile(Tuple{getfield(RadiativeTransfer.CrossSection, Symbol("#read_hitran##kw")), NamedTuple{(:mol, :iso, :ν_min), Tuple{Int64, Int64, Int64}}, typeof(RadiativeTransfer.CrossSection.read_hitran), String})
    isdefined(RadiativeTransfer, Symbol("#read_hitran##kw")) && precompile(Tuple{getfield(RadiativeTransfer.CrossSection, Symbol("#read_hitran##kw")), NamedTuple{(:mol, :iso, :ν_min, :ν_max), Tuple{Int64, Int64, Int64, Int64}}, typeof(RadiativeTransfer.CrossSection.read_hitran), String})
    isdefined(RadiativeTransfer, Symbol("#read_hitran##kw")) && precompile(Tuple{getfield(RadiativeTransfer.CrossSection, Symbol("#read_hitran##kw")), NamedTuple{(:mol, :ν_min, :ν_max), Tuple{Int64, Int64, Int64}}, typeof(RadiativeTransfer.CrossSection.read_hitran), String})
    isdefined(RadiativeTransfer, Symbol("#read_hitran##kw")) && precompile(Tuple{getfield(RadiativeTransfer.CrossSection, Symbol("#read_hitran##kw")), NamedTuple{(:ν_min, :ν_max), Tuple{Int64, Int64}}, typeof(RadiativeTransfer.CrossSection.read_hitran), String})
    precompile(Tuple{typeof(RadiativeTransfer.CrossSection.AtoB), Float64, Array{Float64, 1}, Array{Float64, 1}, Int64})
    precompile(Tuple{typeof(RadiativeTransfer.CrossSection.AtoB), Int64, Array{Float64, 1}, Array{Float64, 1}, Int64})
    precompile(Tuple{typeof(RadiativeTransfer.CrossSection.absorption_cross_section), RadiativeTransfer.CrossSection.HitranModel, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64, Int64, Bool})
    precompile(Tuple{typeof(RadiativeTransfer.CrossSection.absorption_cross_section), RadiativeTransfer.CrossSection.InterpolationModel, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64, Int64, Bool})
    precompile(Tuple{typeof(RadiativeTransfer.CrossSection.absorption_cross_section), RadiativeTransfer.CrossSection.InterpolationModel, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64, Int64})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_Sl), Int64, Int64, Int64, Bool, Float64, Int64, Tuple{LinearAlgebra.LowerTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, LinearAlgebra.LowerTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, LinearAlgebra.LowerTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, LinearAlgebra.LowerTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 3}, Array{Float64, 3}})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_aerosol_optical_properties), RadiativeTransfer.PhaseFunction.MieModel{RadiativeTransfer.PhaseFunction.NAI2}})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_aerosol_optical_properties), RadiativeTransfer.PhaseFunction.MieModel{RadiativeTransfer.PhaseFunction.PCW}})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_anbn), RadiativeTransfer.PhaseFunction.UnivariateAerosol{Float64, Float64}, Float64, Array{Float64, 1}})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_avg_C_scatt_ext), Float64, Array{Base.Complex{Float64}, 2}, Array{Base.Complex{Float64}, 2}, Array{Float64, 1}})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_avg_anbns!), Array{Base.Complex{Float64}, 2}, Array{Base.Complex{Float64}, 2}, Tuple{LinearAlgebra.LowerTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, LinearAlgebra.LowerTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, LinearAlgebra.LowerTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, LinearAlgebra.LowerTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}}, Array{Float64, 1}, Int64, Array{Int64, 1}})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_legendre_poly), Array{Float64, 1}, Int64})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_mie_S₁S₂!), Array{Base.Complex{Float64}, 1}, Array{Base.Complex{Float64}, 1}, Array{Float64, 2}, Array{Float64, 2}, Base.SubArray{Base.Complex{Float64}, 1, Array{Base.Complex{Float64}, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Base.Complex{Float64}, 1, Array{Base.Complex{Float64}, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_mie_ab!), Float64, Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}, Array{Base.Complex{Float64}, 1}, Array{Base.Complex{Float64}, 1}})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_mie_ab!), Float64, Base.Complex{Float64}, Base.SubArray{Base.Complex{Float64}, 1, Array{Base.Complex{Float64}, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, Base.SubArray{Base.Complex{Float64}, 1, Array{Base.Complex{Float64}, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, Array{Base.Complex{Float64}, 1}})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_mie_π_τ), Array{Float64, 1}, Int64})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.compute_wₓ), Distributions.LogNormal{Float64}, Array{Float64, 1}, Array{Float64, 1}, Float64})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.get_n_max), Float64})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.load_wigner_values), String})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.make_mie_model), RadiativeTransfer.PhaseFunction.NAI2, RadiativeTransfer.PhaseFunction.UnivariateAerosol{Float64, Float64}, Float64, RadiativeTransfer.PhaseFunction.Stokes_IQUV, RadiativeTransfer.PhaseFunction.δBGE{Int64}})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.make_mie_model), RadiativeTransfer.PhaseFunction.PCW, RadiativeTransfer.PhaseFunction.UnivariateAerosol{Float64, Float64}, Float64, RadiativeTransfer.PhaseFunction.Stokes_IQUV, RadiativeTransfer.PhaseFunction.δBGE{Int64}, Array{Float64, 3}, Array{Float64, 3}})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.make_univariate_aerosol), Distributions.LogNormal{Float64}, Float64, Int64, Float64, Float64})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.wigner3j!), Int64, Int64, Int64, Int64, Int64, Int64, Array{Float64, 3}, Array{Float64, 3}})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.wigner3j_000!), Int64, Int64, Int64, Array{Float64, 3}, Array{Float64, 3}})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.wigner3j_m110!), Int64, Int64, Int64, Array{Float64, 3}, Array{Float64, 3}})
    precompile(Tuple{typeof(RadiativeTransfer.PhaseFunction.wigner_m1m12!), Int64, Int64, Int64, Array{Float64, 3}, Array{Float64, 3}})
    precompile(Tuple{typeof(RadiativeTransfer.__init__)})
end
