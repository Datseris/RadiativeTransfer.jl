"Elemental single-scattering layer"
function elemental_helper!(pol_type, SFI, iŒº0,
                            œÑ_sum::AbstractArray{FT,1}, #Suniti
                            dœÑ_Œª::AbstractArray{FT,1}, 
                            dœÑ::FT, 
                            œñ_Œª::AbstractArray{FT,1}, 
                            œñ::FT, 
                            Z‚Å∫‚Å∫::AbstractArray{FT,2}, 
                            Z‚Åª‚Å∫::AbstractArray{FT,2}, 
                            m::Int, 
                            ndoubl::Int, 
                            scatter, 
                            qp_Œº::AbstractArray{FT,1}, 
                            wt_Œº::AbstractArray{FT,1}, 
                            added_layer::AddedLayer{FT}, 
                            I_static,
                            arr_type,
                            architecture) where {FT}
    
    @unpack r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫, J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª = added_layer
    # @show FT
    # ToDo: Main output is r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫, J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª (can be renamed to t‚Å∫‚Å∫, etc)
    # Need to check with paper nomenclature. This is basically eqs. 19-20 in vSmartMOM

    # dœÑ: optical depth of elemental layer
    # œñ: single scattering albedo of elemental layer
    # bb: thermal source function at the upper boundary of the elemental layer
    # m: fourier moment
    # n: layer of which this is an elemental
    # ndoubl: number of doubling computations needed to progress from the elemental layer 
    #         to the full homogeneous layer n
    # scatter: flag indicating scattering

    Z‚Å∫‚Å∫_ = repeat(Z‚Å∫‚Å∫, 1, 1, 1)
    Z‚Åª‚Å∫_ = repeat(Z‚Åª‚Å∫, 1, 1, 1)

    D = Diagonal(arr_type(repeat(pol_type.D, size(qp_Œº,1))))

    device = devi(architecture)

    if scatter
        qp_ŒºN = arr_type(reduce(vcat, (fill.(qp_Œº, [pol_type.n]))))
        wt_ŒºN = arr_type(reduce(vcat, (fill.(wt_Œº, [pol_type.n]))))
        #for i=1:length(qp_ŒºN)
        #    @show(i, qp_ŒºN[i])
        #end
        NquadN = length(qp_ŒºN)

        wct = m == 0 ? FT(0.50) *œñ * wt_ŒºN  : FT(0.25) * œñ * wt_ŒºN
        wct2 = m == 0 ? wt_ŒºN  : wt_ŒºN / 2
        # wct = m==0 ? 0.50 * 1 .* wt_Œº4  : 0.25 .* 1 .* wt_Œº4

        # Get the diagonal matrices first
        d_qp  = Diagonal(arr_type(1 ./ qp_ŒºN))
        d_wct = Diagonal(arr_type(wct))

        # Calculate r‚Åª‚Å∫ and t‚Å∫‚Å∫
        
        # Version 1: no absorption in batch mode (like before), need to separate these modes
        if maximum(dœÑ_Œª) < 0.0001 

            r‚Åª‚Å∫[:,:,:] .= d_qp * Z‚Åª‚Å∫ * (d_wct * dœÑ)
            t‚Å∫‚Å∫[:,:,:] .= I_static - (d_qp * ((I_static - Z‚Å∫‚Å∫ * d_wct) * dœÑ))
        else    
        # Version 2: with absorption in batch mode, low tau_scatt but higher tau_total, needs different equations
        # This is not yet GPU ready as it has element wise operations (should work for CPU)
            
            kernel! = get_elem_rt!(device)
            event = kernel!(r‚Åª‚Å∫, r‚Å∫‚Åª, t‚Å∫‚Å∫, t‚Åª‚Åª, J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª, œñ_Œª, dœÑ_Œª, œÑ_sum, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, qp_ŒºN, wct2, ndoubl, pol_type, SFI, iŒº0, D, ndrange=size(r‚Åª‚Å∫)); #Suniti: what does this do? 
            
            wait(device, event)
            ### synchronize() # Check for CUDA here, only use with GPU!
        end
        #@show(r‚Åª‚Å∫[1,1,1], t‚Å∫‚Å∫[1,1,1], J‚ÇÄ‚Åª[1,1], J‚ÇÄ‚Å∫[1,1])
        
    else 
        # Note: œÑ is not defined here
        t‚Å∫‚Å∫[:] = Diagonal{exp(-œÑ ./ qp_ŒºN)}
        t‚Åª‚Åª[:] = Diagonal{exp(-œÑ ./ qp_ŒºN)}
    end    
    #@show(t‚Å∫‚Å∫[1,1,1,], added_layer.t‚Å∫‚Å∫[1,1,1])
    @pack! added_layer = r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫, J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª   
end

@kernel function get_elem_rt!(r‚Åª‚Å∫, r‚Å∫‚Åª, t‚Å∫‚Å∫, t‚Åª‚Åª, J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª, œñ_Œª, dœÑ_Œª, œÑ_sum, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, qp_Œº4, wct2, ndoubl, pol_type, SFI, iŒº0, D)
    i, j, n = @index(Global, NTuple) ##Suniti: What are Global and Ntuple?
    #D = arr_type(Diagonal(repeat(pol_type.D, size(qp_Œº4)[1]/pol_type.n))) #Suniti, #Chr: needs to be outside if using GPU
    if (wct2[j]>1.e-8) 
        # ùêë‚Åª‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Åª‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢+Œº‚±º)) Ãá(1 - exp{-œÑ Ãá(1/Œº·µ¢ + 1/Œº‚±º)}) Ãáùë§‚±º
        r‚Åª‚Å∫[i,j,n] = œñ_Œª[n] * Z‚Åª‚Å∫[i,j] * (qp_Œº4[j] / (qp_Œº4[i] + qp_Œº4[j])) * (1 - exp.(-dœÑ_Œª[n] * ((1 / qp_Œº4[i]) + (1 / qp_Œº4[j])))) * (wct2[j]) 
                    
        if (qp_Œº4[i] == qp_Œº4[j])

            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) = (exp{-œÑ/Œº·µ¢} + œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) Ãá(œÑ/Œº·µ¢) Ãáexp{-œÑ/Œº·µ¢}) Ãáùë§·µ¢
            if i == j
                t‚Å∫‚Å∫[i,j,n] = exp(-dœÑ_Œª[n] / qp_Œº4[i]) + œñ_Œª[n] * Z‚Å∫‚Å∫[i,i] * (dœÑ_Œª[n] / qp_Œº4[i]) * exp.(-dœÑ_Œª[n] / qp_Œº4[i]) * wct2[i]
            else
                t‚Å∫‚Å∫[i,j,n] = 0.0
            end
        else
    
            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢-Œº‚±º)) Ãá(exp{-œÑ/Œº·µ¢} - exp{-œÑ/Œº‚±º}) Ãáùë§‚±º
            # (ùëñ ‚â† ùëó)
            t‚Å∫‚Å∫[i,j,n] = œñ_Œª[n] * Z‚Å∫‚Å∫[i,j] * (qp_Œº4[j] / (qp_Œº4[i] - qp_Œº4[j])) * (exp(-dœÑ_Œª[n] / qp_Œº4[i]) - exp(-dœÑ_Œª[n] / qp_Œº4[j])) * wct2[j]
        end
    else
        r‚Åª‚Å∫[i,j,n] = 0.0
        if i==j
            t‚Å∫‚Å∫[i,j,n] = exp(-dœÑ_Œª[n] / qp_Œº4[i]) #Suniti
        else
            t‚Å∫‚Å∫[i,j,n] = 0.0
        end
    end
    if ndoubl < 1
        ii = mod(i, pol_type.n) #Suniti
        jj = mod(j, pol_type.n) #Suniti
        if ((ii <= 2) & (jj <= 2)) | ((ii > 2) & (jj > 2)) #Suniti
            r‚Å∫‚Åª[i,j,n] = r‚Åª‚Å∫[i,j,n]
            t‚Åª‚Åª[i,j,n] = t‚Å∫‚Å∫[i,j,n]
        else
            r‚Å∫‚Åª[i,j,n] = -r‚Åª‚Å∫[i,j,n] #Suniti: added - sign
            t‚Åª‚Åª[i,j,n] = -t‚Å∫‚Å∫[i,j,n] #Suniti: added - sign
        end
    else
        if mod(i, pol_type.n) > 2
            r‚Åª‚Å∫[i,j,n] = - r‚Åª‚Å∫[i,j,n]
        end 
    end
    if j==1
        if SFI
            J‚ÇÄ‚Å∫[i,n]=0
             J‚ÇÄ‚Åª[i,n]=0
            #for j0=iŒº0:(iŒº0+pol_type.n-1)
            j0  = pol_type.n*(iŒº0-1) + 1 
            #vj0 = j0:j0+pol_type.n-1    
            #Suniti: define œÑ_sum to be the sum of the optical thicknesses of all distinct homogeneous layers above the layer under consideration
            for ctr=0:pol_type.n-1
                if (qp_Œº4[i] == qp_Œº4[j0])
                    # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) = (exp{-œÑ/Œº·µ¢} + œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) Ãá(œÑ/Œº·µ¢) Ãáexp{-œÑ/Œº·µ¢}) Ãáùë§·µ¢
                    J‚ÇÄ‚Å∫[i,n] += exp(-dœÑ_Œª[n] / qp_Œº4[i]) + œñ_Œª[n] * (Z‚Å∫‚Å∫[i,j0+ctr]*pol_type.I‚ÇÄ[ctr+1]) * (dœÑ_Œª[n] / qp_Œº4[i]) * exp.(-dœÑ_Œª[n] / qp_Œº4[i]) * exp(-œÑ_sum[n]/qp_Œº4[j0])
                else        
                    # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢-Œº‚±º)) Ãá(exp{-œÑ/Œº·µ¢} - exp{-œÑ/Œº‚±º}) Ãáùë§‚±º
                    # (ùëñ ‚â† ùëó)
                    J‚ÇÄ‚Å∫[i,n] += œñ_Œª[n] * (Z‚Å∫‚Å∫[i,j0+ctr]*pol_type.I‚ÇÄ[ctr+1]) * (qp_Œº4[j0] / (qp_Œº4[i] - qp_Œº4[j0])) * (exp(-dœÑ_Œª[n] / qp_Œº4[i]) - exp(-dœÑ_Œª[n] / qp_Œº4[j0])) * exp(-œÑ_sum[n]/qp_Œº4[j0])
                end
                # ùêë‚Åª‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Åª‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢+Œº‚±º)) Ãá(1 - exp{-œÑ Ãá(1/Œº·µ¢ + 1/Œº‚±º)}) Ãáùë§‚±º
                J‚ÇÄ‚Åª[i,n] += œñ_Œª[n] * (Z‚Åª‚Å∫[i,j0+ctr]*pol_type.I‚ÇÄ[ctr+1]) * (qp_Œº4[j0] / (qp_Œº4[i] + qp_Œº4[j0])) * (1 - exp.(-dœÑ_Œª[n] * ((1 / qp_Œº4[i]) + (1 / qp_Œº4[j0])))) *exp(-œÑ_sum[n]/qp_Œº4[j0])#*I0[i%4] Suniti 
            end 
            if ndoubl >= 1
                J‚ÇÄ‚Åª[i,n] = D[i,i]*J‚ÇÄ‚Åª[i,n] #Suniti: define D = Diagonal{1,1,-1,-1,...Nquad times}
            end
        end
    end
end

@kernel function get_elem_rt_SFI!(J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª, œñ_Œª, dœÑ_Œª, œÑ_sum, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, qp_Œº4, ndoubl, pol_type, iŒº0, D)
    i, n = @index(Global, NTuple) ##Suniti: What are Global and Ntuple?

    J‚ÇÄ‚Å∫[i,n]=0
    J‚ÇÄ‚Åª[i,n]=0
    i_start  = pol_type.n*(iŒº0-1) + 1 
    i_end    = pol_type.n*iŒº0
    if (i>=i_start) && (i<=i_end)
        ctr = i-i_start+1
        J‚ÇÄ‚Å∫[i,n] = exp(-dœÑ_Œª[n] / qp_Œº4[i]) * pol_type.I‚ÇÄ[ctr]
        # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) = (exp{-œÑ/Œº·µ¢} + œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) Ãá(œÑ/Œº·µ¢) Ãáexp{-œÑ/Œº·µ¢}) Ãáùë§·µ¢
        J‚ÇÄ‚Å∫[i,n] += œñ_Œª[n] * (Z‚Å∫‚Å∫[i,i_start:i_end]*pol_type.I‚ÇÄ) * (dœÑ_Œª[n] / qp_Œº4[i]) * exp.(-dœÑ_Œª[n] / qp_Œº4[i])
    else
        J‚ÇÄ‚Å∫[i,n] += œñ_Œª[n] * (Z‚Å∫‚Å∫[i,i_start:i_end]*pol_type.I‚ÇÄ) * (qp_Œº4[i_start] / (qp_Œº4[i] - qp_Œº4[i_start])) * (exp(-dœÑ_Œª[n] / qp_Œº4[i]) - exp(-dœÑ_Œª[n] / qp_Œº4[i_start]))
    end
    # ùêë‚Åª‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Åª‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢+Œº‚±º)) Ãá(1 - exp{-œÑ Ãá(1/Œº·µ¢ + 1/Œº‚±º)}) Ãáùë§‚±º
    J‚ÇÄ‚Åª[i,n] += œñ_Œª[n] * (Z‚Åª‚Å∫[i,i_start:i_end]*pol_type.I‚ÇÄ) * (qp_Œº4[i_start] / (qp_Œº4[i] + qp_Œº4[i_start])) * (1 - exp.(-dœÑ_Œª[n] * ((1 / qp_Œº4[i]) + (1 / qp_Œº4[i_start]))))

    J‚ÇÄ‚Å∫[i,n] *= exp(-œÑ_sum[n]/qp_Œº4[j0])
    J‚ÇÄ‚Åª[i,n] *= exp(-œÑ_sum[n]/qp_Œº4[j0])
    
    if ndoubl >= 1
        J‚ÇÄ‚Åª[i,n] = D[i,i]*J‚ÇÄ‚Åª[i,n] #Suniti: define D = Diagonal{1,1,-1,-1,...Nquad times}
    end
        
    
end

function elemental!(pol_type, SFI, iŒº0, œÑ_sum, dœÑ_Œª, dœÑ, œñ_Œª, œñ, Z‚Å∫‚Å∫, Z‚Åª‚Å∫, m, 
                              ndoubl, scatter, qp_Œº, wt_Œº, 
                              added_layer::AddedLayer{FT}, 
                              I_static,
                              arr_type,
                              architecture) where {FT}
    
    elemental_helper!(pol_type, SFI, iŒº0, œÑ_sum, dœÑ_Œª, dœÑ, œñ_Œª, œñ, Z‚Å∫‚Å∫, Z‚Åª‚Å∫, m, ndoubl, scatter, qp_Œº, wt_Œº, added_layer, I_static, arr_type, architecture)
    ### synchronize()
end