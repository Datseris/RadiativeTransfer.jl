# <<Suniti>> it would be helpful to comment through this file (and remove unwanted lines). Thanks! 

"Elemental single-scattering layer"
function elemental!(pol_type, SFI::Bool, 
                            œÑ_sum::AbstractArray,#{FT2,1}, #Suniti
                            dœÑ_Œª::AbstractArray{FT,1},  # dœÑ_Œª: total optical depth of elemental layer (per Œª)
                            dœÑ::FT,                     # dœÑ:   scattering optical depth of elemental layer (scalar)
                            œñ_Œª::AbstractArray{FT,1},   # œñ: single scattering albedo of elemental layer (per Œª, absorptions by gases included)
                            œñ::FT,                      # œñ: single scattering albedo of elemental layer (no trace gas included)
                            Z‚Å∫‚Å∫::AbstractArray{FT,2},   # Z matrix
                            Z‚Åª‚Å∫::AbstractArray{FT,2}, 
                            m::Int,                     # m: fourier moment
                            ndoubl::Int,                # ndoubl: number of doubling computations needed 
                            scatter::Bool,              # scatter: flag indicating scattering
                            quad_points::QuadPoints{FT2}, # struct with quadrature points, weights, 
                            added_layer::AddedLayer{FT}, 
                            I_static,
                            architecture) where {FT<:Union{AbstractFloat, ForwardDiff.Dual},FT2}
    
    @unpack r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫, J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª = added_layer
    @unpack qp_Œº, wt_Œº, qp_ŒºN, wt_ŒºN, iŒº‚ÇÄNstart, iŒº‚ÇÄ = quad_points
    arr_type = array_type(architecture)
    # @show FT
    # ToDo: Main output is r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫, J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª (can be renamed to t‚Å∫‚Å∫, etc)
    # Need to check with paper nomenclature. This is basically eqs. 19-20 in vSmartMOM
    

    # Later on, we can have Zs also vary with index, pretty easy here:
    # Z‚Å∫‚Å∫_ = repeat(Z‚Å∫‚Å∫, 1, 1, 1)
    Z‚Å∫‚Å∫_ = reshape(Z‚Å∫‚Å∫, (size(Z‚Å∫‚Å∫,1), size(Z‚Å∫‚Å∫,2),1))
    # Z‚Åª‚Å∫_ = repeat(Z‚Åª‚Å∫, 1, 1, 1)
    Z‚Åª‚Å∫_ = reshape(Z‚Åª‚Å∫, (size(Z‚Å∫‚Å∫,1), size(Z‚Å∫‚Å∫,2),1))

    D = Diagonal(arr_type(repeat(pol_type.D, size(qp_Œº,1))))
    I‚ÇÄ_NquadN = arr_type(zeros(FT,size(qp_ŒºN,1)));
    i_start   = pol_type.n*(iŒº‚ÇÄ-1) + 1 
    i_end     = pol_type.n*iŒº‚ÇÄ
    I‚ÇÄ_NquadN[iŒº‚ÇÄNstart:i_end] = pol_type.I‚ÇÄ

    device = devi(architecture)

    # If in scattering mode:
    if scatter
   
        NquadN = length(qp_ŒºN)

        # Needs explanation still, different weigths:
        wct0  = m == 0 ? FT(0.50) * œñ * dœÑ     : FT(0.25) * œñ * dœÑ
        wct02 = m == 0 ? FT(0.50)              : FT(0.25)
        wct   = m == 0 ? FT(0.50) * œñ * wt_ŒºN  : FT(0.25) * œñ * wt_ŒºN
        wct2  = m == 0 ? wt_ŒºN/2               : wt_ŒºN/4

        # Get the diagonal matrices first
        d_qp  = Diagonal(1 ./ qp_ŒºN)
        d_wct = Diagonal(wct)

        # Calculate r‚Åª‚Å∫ and t‚Å∫‚Å∫
        
        # Version 1: no absorption in batch mode (like before), need to separate these modes
        if maximum(dœÑ_Œª) < 0.0001 
            #@show "Chose simple elemental"
            #@show typeof(œÑ_sum)
            r‚Åª‚Å∫[:,:,:] .= d_qp * Z‚Åª‚Å∫ * (d_wct * dœÑ)
            t‚Å∫‚Å∫[:,:,:] .= I_static - (d_qp * ((I_static - Z‚Å∫‚Å∫ * d_wct) * dœÑ))
            if SFI
                # Reminder: Add equation here what it does
                expk = exp.(-œÑ_sum/qp_Œº[iŒº‚ÇÄ])

                J‚ÇÄ‚Å∫[:,1,:] .= ((d_qp * Z‚Å∫‚Å∫ * I‚ÇÄ_NquadN) * wct0) .* expk'
                J‚ÇÄ‚Åª[:,1,:] .= ((d_qp * Z‚Åª‚Å∫ * I‚ÇÄ_NquadN) * wct0) .* expk'
              
            end
            #ii = pol_type.n*(iŒº0-1)+1
            #@show 'A',iŒº0,  r‚Åª‚Å∫[1,ii,1]/(J‚ÇÄ‚Åª[1,1,1]*wt_Œº[iŒº0]), r‚Åª‚Å∫[1,ii,1], J‚ÇÄ‚Åª[1,1,1]*wt_Œº[iŒº0], J‚ÇÄ‚Å∫[1,1,1]*wt_Œº[iŒº0]
    
        else
            #@show "Chose accurate elemental",  maximum(dœÑ_Œª)   
            #@show('B')
            # Version 2: with absorption in batch mode, low tau_scatt but higher tau_total, needs different equations
            # This is not yet GPU ready as it has element wise operations (should work for CPU)
            
            kernel! = get_elem_rt!(device)
            event = kernel!(r‚Åª‚Å∫, t‚Å∫‚Å∫, œñ_Œª, dœÑ_Œª, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, qp_ŒºN, wct, ndrange=size(r‚Åª‚Å∫)); 
            wait(device, event)
            synchronize_if_gpu()

            if SFI
                kernel! = get_elem_rt_SFI!(device)
                event = kernel!(J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª, œñ_Œª, dœÑ_Œª, œÑ_sum, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, qp_ŒºN, ndoubl, wct02, pol_type.n, arr_type(pol_type.I‚ÇÄ), iŒº‚ÇÄ, D, ndrange=size(J‚ÇÄ‚Å∫))
                wait(device, event)
            end
            #ii = pol_type.n*(iŒº0-1)+1
            #@show 'B',iŒº0,  r‚Åª‚Å∫[1,ii,1]/(J‚ÇÄ‚Åª[1,1,1]*wt_Œº[iŒº0]), r‚Åª‚Å∫[1,ii,1], J‚ÇÄ‚Åª[1,1,1]*wt_Œº[iŒº0], J‚ÇÄ‚Å∫[1,1,1]*wt_Œº[iŒº0]
            synchronize_if_gpu()
        end
        kernel! = apply_D_elemental!(device)
        event = kernel!(ndoubl, pol_type.n, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª, ndrange=size(r‚Åª‚Å∫));
        wait(device, event)
        synchronize_if_gpu()
        if SFI
            kernel! = apply_D_elemental_SFI!(device)
            event = kernel!(ndoubl, pol_type.n, J‚ÇÄ‚Åª, ndrange=size(J‚ÇÄ‚Åª));
            wait(device, event)
            synchronize_if_gpu()
        end
        #@show(r‚Åª‚Å∫[1,1,1], t‚Å∫‚Å∫[1,1,1], J‚ÇÄ‚Åª[1,1], J‚ÇÄ‚Å∫[1,1])
        
    else 
        # Note: œÑ is not defined here
        t‚Å∫‚Å∫[:] = Diagonal{exp(-œÑ ./ qp_ŒºN)}
        t‚Åª‚Åª[:] = Diagonal{exp(-œÑ ./ qp_ŒºN)}
        #if SFI
        #    J‚ÇÄ‚Å∫ = I‚ÇÄ_NquadN * exp(-œÑ_sum/qp_Œº[iŒº0])
        #end
    end    

    @pack! added_layer = r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫, J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª   
end

@kernel function get_elem_rt!(r‚Åª‚Å∫, t‚Å∫‚Å∫, œñ_Œª, dœÑ_Œª, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, qp_ŒºN, wct2)
    i, j, n = @index(Global, NTuple) ##Suniti: What are Global and Ntuple?
    #D = arr_type(Diagonal(repeat(pol_type.D, size(qp_Œº4)[1]/pol_type.n))) #Suniti, #Chr: needs to be outside if using GPU
    if (wct2[j]>1.e-8) 
        # ùêë‚Åª‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Åª‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢+Œº‚±º)) Ãá(1 - exp{-œÑ Ãá(1/Œº·µ¢ + 1/Œº‚±º)}) Ãáùë§‚±º
        r‚Åª‚Å∫[i,j,n] = œñ_Œª[n] * Z‚Åª‚Å∫[i,j] * (qp_ŒºN[j] / (qp_ŒºN[i] + qp_ŒºN[j])) * (1 - exp(-dœÑ_Œª[n] * ((1 / qp_ŒºN[i]) + (1 / qp_ŒºN[j])))) * (wct2[j]) 
                    
        if (qp_ŒºN[i] == qp_ŒºN[j])
            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) = (exp{-œÑ/Œº·µ¢} + œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) Ãá(œÑ/Œº·µ¢) Ãáexp{-œÑ/Œº·µ¢}) Ãáùë§·µ¢
            if i == j
                t‚Å∫‚Å∫[i,j,n] = exp(-dœÑ_Œª[n] / qp_ŒºN[i])*(1 + œñ_Œª[n] * Z‚Å∫‚Å∫[i,i] * (dœÑ_Œª[n] / qp_ŒºN[i]) * wct2[i])
            else
                t‚Å∫‚Å∫[i,j,n] = 0.0
            end
        else
    
            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢-Œº‚±º)) Ãá(exp{-œÑ/Œº·µ¢} - exp{-œÑ/Œº‚±º}) Ãáùë§‚±º
            # (ùëñ ‚â† ùëó)
            t‚Å∫‚Å∫[i,j,n] = œñ_Œª[n] * Z‚Å∫‚Å∫[i,j] * (qp_ŒºN[j] / (qp_ŒºN[i] - qp_ŒºN[j])) * (exp(-dœÑ_Œª[n] / qp_ŒºN[i]) - exp(-dœÑ_Œª[n] / qp_ŒºN[j])) * wct2[j]
        end
    else
        r‚Åª‚Å∫[i,j,n] = 0.0
        if i==j
            t‚Å∫‚Å∫[i,j,n] = exp(-dœÑ_Œª[n] / qp_ŒºN[i]) #Suniti
        else
            t‚Å∫‚Å∫[i,j,n] = 0.0
        end
    end
    
end

@kernel function get_elem_rt_SFI!(J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª, œñ_Œª, dœÑ_Œª, œÑ_sum, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, qp_ŒºN, ndoubl, wct02, nStokes ,I‚ÇÄ, iŒº0, D)
    i_start  = nStokes*(iŒº0-1) + 1 
    i_end    = nStokes*iŒº0
    
    i, _, n = @index(Global, NTuple) ##Suniti: What are Global and Ntuple?
    FT = eltype(I‚ÇÄ)
    J‚ÇÄ‚Å∫[i, 1, n]=0
    J‚ÇÄ‚Åª[i, 1, n]=0

    
    Z‚Å∫‚Å∫_I‚ÇÄ = FT(0.0);
    Z‚Åª‚Å∫_I‚ÇÄ = FT(0.0);
    for ii = i_start:i_end
        Z‚Å∫‚Å∫_I‚ÇÄ += Z‚Å∫‚Å∫[i,ii] * I‚ÇÄ[ii-i_start+1]
        Z‚Åª‚Å∫_I‚ÇÄ += Z‚Åª‚Å∫[i,ii] * I‚ÇÄ[ii-i_start+1] 
    end

    if (i>=i_start) && (i<=i_end)
        ctr = i-i_start+1
        #J‚ÇÄ‚Å∫[i,n] = exp(-dœÑ_Œª[n] / qp_Œº4[i]) * pol_type.I‚ÇÄ[ctr]
        # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) = (exp{-œÑ/Œº·µ¢} + œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) Ãá(œÑ/Œº·µ¢) Ãáexp{-œÑ/Œº·µ¢}) Ãáùë§·µ¢
        #J‚ÇÄ‚Å∫[i, 1, n] = testCF * œñ_Œª[n] * (Z‚Å∫‚Å∫[i,i_start:i_end]'*pol_type.I‚ÇÄ) * (dœÑ_Œª[n] / qp_ŒºN[i]) * exp.(-dœÑ_Œª[n] / qp_ŒºN[i])
        J‚ÇÄ‚Å∫[i, 1, n] = wct02 * œñ_Œª[n] * Z‚Å∫‚Å∫_I‚ÇÄ * (dœÑ_Œª[n] / qp_ŒºN[i]) * exp(-dœÑ_Œª[n] / qp_ŒºN[i])
    else
        #J‚ÇÄ‚Å∫[i, 1, n] = testCF * œñ_Œª[n] * (Z‚Å∫‚Å∫[i,i_start:i_end]'*pol_type.I‚ÇÄ) * (qp_ŒºN[i_start] / (qp_ŒºN[i] - qp_ŒºN[i_start])) * (exp(-dœÑ_Œª[n] / qp_ŒºN[i]) - exp(-dœÑ_Œª[n] / qp_ŒºN[i_start]))
        J‚ÇÄ‚Å∫[i, 1, n] = wct02 * œñ_Œª[n] * Z‚Å∫‚Å∫_I‚ÇÄ * (qp_ŒºN[i_start] / (qp_ŒºN[i] - qp_ŒºN[i_start])) * (exp(-dœÑ_Œª[n] / qp_ŒºN[i]) - exp(-dœÑ_Œª[n] / qp_ŒºN[i_start]))
    end
    # ùêë‚Åª‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Åª‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢+Œº‚±º)) Ãá(1 - exp{-œÑ Ãá(1/Œº·µ¢ + 1/Œº‚±º)}) Ãáùë§‚±º
    #J‚ÇÄ‚Åª[i, 1, n] = œñ_Œª[n] * (Z‚Åª‚Å∫[i,i_start:i_end]'*pol_type.I‚ÇÄ) * (qp_ŒºN[i_start] / (qp_ŒºN[i] + qp_ŒºN[i_start])) * (1 - exp.(-dœÑ_Œª[n] * ((1 / qp_ŒºN[i]) + (1 / qp_ŒºN[i_start]))))
    J‚ÇÄ‚Åª[i, 1, n] = wct02 * œñ_Œª[n] * Z‚Åª‚Å∫_I‚ÇÄ * (qp_ŒºN[i_start] / (qp_ŒºN[i] + qp_ŒºN[i_start])) * (1 - exp(-dœÑ_Œª[n] * ((1 / qp_ŒºN[i]) + (1 / qp_ŒºN[i_start]))))

    #J‚ÇÄ‚Å∫[i, 1, n] *= testCF * exp(-œÑ_sum[n]/qp_ŒºN[i_start])
    #J‚ÇÄ‚Åª[i, 1, n] *= testCF * exp(-œÑ_sum[n]/qp_ŒºN[i_start])
    J‚ÇÄ‚Å∫[i, 1, n] *= exp(-œÑ_sum[n]/qp_ŒºN[i_start])
    J‚ÇÄ‚Åª[i, 1, n] *= exp(-œÑ_sum[n]/qp_ŒºN[i_start])

    if ndoubl >= 1
        J‚ÇÄ‚Åª[i, 1, n] = D[i,i]*J‚ÇÄ‚Åª[i, 1, n] #Suniti: define D = Diagonal{1,1,-1,-1,...Nquad times}
    end        
end

@kernel function apply_D_elemental!(ndoubl, pol_n, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª)
    i, j, n = @index(Global, NTuple)

    if ndoubl < 1
        ii = mod(i, pol_n) #Suniti
        jj = mod(j, pol_n) #Suniti
        if ((ii <= 2) & (jj <= 2)) | ((ii > 2) & (jj > 2)) #Suniti
            r‚Å∫‚Åª[i,j,n] = r‚Åª‚Å∫[i,j,n]
            t‚Åª‚Åª[i,j,n] = t‚Å∫‚Å∫[i,j,n]
        else
            r‚Å∫‚Åª[i,j,n] = -r‚Åª‚Å∫[i,j,n] #Suniti: added - sign
            t‚Åª‚Åª[i,j,n] = -t‚Å∫‚Å∫[i,j,n] #Suniti: added - sign
        end
    else
        if mod(i, pol_n) > 2
            r‚Åª‚Å∫[i,j,n] = - r‚Åª‚Å∫[i,j,n]
        end 
    end
end

@kernel function apply_D_elemental_SFI!(ndoubl, pol_n, J‚ÇÄ‚Åª)
    i, _, n = @index(Global, NTuple)
    
    if ndoubl>1
        if mod(i, pol_n) > 2
            J‚ÇÄ‚Åª[i, 1, n] = - J‚ÇÄ‚Åª[i, 1, n]
        end 
    end
end

#function elemental!(pol_type, SFI, iŒº0, œÑ_sum, dœÑ_Œª, dœÑ, œñ_Œª, œñ, Z‚Å∫‚Å∫, Z‚Åª‚Å∫, m, 
#                              ndoubl, scatter, qp_Œº, wt_Œº, 
#                              added_layer::AddedLayer{FT}, 
#                              I_static,
#                              arr_type,
#                              architecture) where {FT}
#    
#    elemental_helper!(pol_type, SFI, iŒº0, œÑ_sum, dœÑ_Œª, dœÑ, œñ_Œª, œñ, Z‚Å∫‚Å∫, Z‚Åª‚Å∫, m, ndoubl, scatter, qp_Œº, wt_Œº, added_layer, I_static, arr_type, architecture)
#    synchronize_if_gpu()
#end